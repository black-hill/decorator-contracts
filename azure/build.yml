name: Build

trigger:
  tags:
    include:
      - v*.*.*

pool:
  name: Hosted Windows Container
  demands: npm

steps:
- script: |
    npm install
  workingDirectory: ./
  displayName: 'npm install'

#- script: |
#    npm audit
#  workingDirectory: ./
#  displayName: 'npm audit'

- script: |
    npm run build-nofix
  workingDirectory: ./
  displayName: 'npm run build-nofix'

- script: |
    npm run test
  workingDirectory: ./
  displayName: 'npm run test'

- powershell: |
    ls *.* | % {
        (Get-Content $_ | ForEach  { $_ -replace '#{YEAR}#', (get-date â€“f yyyy) }) |
        Set-Content $_
    }
  workingDirectory: ./dist
  displayName: "Populate YEAR token"

- powershell: |
    $command = "git describe --abbrev=0 --tags";
    $tag = Invoke-Expression -Command:$command;
    $package = Get-Content './package.json' -raw | ConvertFrom-Json
    $package.version = $tag.substring(1)
    $package | ConvertTo-Json -depth 32 | Set-Content './package.json'
  workingDirectory: ./
  displayName: "Populate VERSION"

- script: |
    npm pack
  workingDirectory: ./
  displayName: 'npm pack'

- powershell: |
    $package = Get-Content './package.json' -raw | ConvertFrom-Json
    $package.version = "0.0.0"
    $package | ConvertTo-Json -depth 32 | Set-Content './package.json'
  workingDirectory: ./
  displayName: "Revert VERSION to default"

- task: CopyFiles@2
  displayName: 'Stage npm package'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '*.tgz'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    ArtifactName: npm

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: './coverage/junit.xml'

- task: PublishCodeCoverageResults@1
  inputs: 
    summaryFileLocation: './clover.xml'
    reportDirectory: './coverage'